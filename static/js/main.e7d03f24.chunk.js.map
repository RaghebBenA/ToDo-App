{"version":3,"sources":["todo/todo.js","NewTodoForm/NewTodoForm.js","ToDoList/ToDoList.js","App.js","index.js"],"names":["Todo","task","id","updateTodo","removeTodo","toggleTodo","completed","useState","isEditing","setEditing","tasks","setTask","HandleChange","e","persist","target","value","handleUpdate","preventDefault","handleToggle","TransitionGroup","className","CSSTransition","key","timeout","classNames","onSubmit","type","name","onChange","onClick","class","NewTodo","createTodo","uuid","htmlFor","placeholder","Object","values","ToDoList","todos","setTodos","Update","updateTask","UpdatedTodos","map","todo","Remove","filter","t","toggleCompletion","updateTodos","todosList","newTodo","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.e7d03f24.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\nimport \"./todo.scss\";\r\nimport { CSSTransition, TransitionGroup } from \"react-transition-group\";\r\n\r\nconst Todo = ({ task, id, updateTodo, removeTodo, toggleTodo, completed }) => {\r\n  const [isEditing, setEditing] = useState(false);\r\n  const [tasks, setTask] = useState(task);\r\n\r\n  const toggleForm = () => {\r\n    setEditing(!isEditing);\r\n  };\r\n  const HandleChange = (e) => {\r\n    e.persist();\r\n    setTask(e.target.value);\r\n  };\r\n  const handleRemove = () => {\r\n    removeTodo(id);\r\n  };\r\n  const handleUpdate = (e) => {\r\n    e.preventDefault();\r\n\r\n    updateTodo(id, tasks);\r\n    setEditing(!isEditing);\r\n  };\r\n  const handleToggle = () => {\r\n    toggleTodo(id);\r\n  };\r\n\r\n  const result = () => {\r\n    if (isEditing) {\r\n      return (\r\n        <CSSTransition key=\"editing\" timeout={500} classNames=\"form\">\r\n          <form className=\"Todo-edit-form\" onSubmit={handleUpdate}>\r\n            <input\r\n              type=\"text\"\r\n              name=\"task\"\r\n              onChange={HandleChange}\r\n              value={tasks}\r\n            />\r\n            <button type=\"submit\">Save</button>\r\n          </form>\r\n        </CSSTransition>\r\n      );\r\n    } else {\r\n      return (\r\n        <CSSTransition key=\"normal\" timeout={500} classNames=\"task-text\">\r\n          <li onClick={handleToggle} className=\"Todo-task\">\r\n            {task}\r\n          </li>\r\n        </CSSTransition>\r\n      );\r\n    }\r\n  };\r\n\r\n  return (\r\n    <TransitionGroup className={completed ? \"Todo completed\" : \"Todo\"}>\r\n      {result()}\r\n      <div className=\"Todo-buttons\">\r\n        <button onClick={toggleForm}>\r\n          <i class=\"fas fa-pen\" />\r\n        </button>\r\n        <button onClick={handleRemove}>\r\n          <i class=\"fas fa-trash\" />\r\n        </button>\r\n      </div>\r\n    </TransitionGroup>\r\n  );\r\n};\r\n\r\nexport default Todo;\r\n","import React, { useState } from \"react\";\r\nimport uuid from \"uuid/v4\";\r\nimport \"./NewTodo.scss\"\r\n\r\nconst NewTodo = ({ createTodo }) => {\r\n  const [task, setTask] = useState(\"\");\r\n\r\n  const HandleChange = (e) => {\r\n    e.persist();\r\n    setTask({ [e.target.name]: e.target.value });\r\n  };\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    createTodo({ ...task, id: uuid(),completed: false });\r\n    setTask(\"\");\r\n  };\r\n\r\n  return (\r\n    <form onSubmit={handleSubmit} className=\"NewTodoForm\">\r\n      <label htmlFor='task'>New Todo</label>\r\n      <input\r\n        type=\"text\"\r\n        placeholder=\"New Todo\"\r\n        id=\"task\"\r\n        name=\"task\"\r\n        onChange={HandleChange}\r\n        value={Object.values(task)}\r\n      />\r\n      <button type=\"submit\">Add Todo</button>\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default NewTodo;\r\n","import React, { useState } from \"react\";\r\nimport Todo from \"../todo/todo\";\r\nimport NewTodo from \"../NewTodoForm/NewTodoForm\";\r\nimport { CSSTransition, TransitionGroup } from \"react-transition-group\";\r\nimport \"./todolist.scss\";\r\n\r\nconst ToDoList = () => {\r\n  const [todos, setTodos] = useState([]);\r\n\r\n  const Create = (newTodo) => {\r\n    setTodos([...todos, newTodo]);\r\n  };\r\n\r\n  const Update = (id, updateTask) => {\r\n    const UpdatedTodos = todos.map((todo) => {\r\n      if (todo.id === id) {\r\n        return { ...todo, task: updateTask };\r\n      }\r\n      return todo;\r\n    });\r\n    setTodos(UpdatedTodos);\r\n  };\r\n  const Remove = (id) => {\r\n    setTodos((todos) => todos.filter((t) => t.id !== id));\r\n  };\r\n\r\n  const toggleCompletion = (id) => {\r\n    const updateTodos = todos.map((todo) => {\r\n      if (todo.id === id) {\r\n        return { ...todo, completed: !todo.completed };\r\n      }\r\n      return todo;\r\n    });\r\n\r\n    setTodos(updateTodos);\r\n  };\r\n\r\n  const todosList = todos.map(({ id, task, completed }) => {\r\n    return (\r\n      <CSSTransition key={id} timeout={500} classNames=\"todo\">\r\n        <Todo\r\n          key={id}\r\n          id={id}\r\n          task={task}\r\n          updateTodo={Update}\r\n          removeTodo={Remove}\r\n          toggleTodo={toggleCompletion}\r\n          completed={completed}\r\n        />\r\n      </CSSTransition>\r\n    );\r\n  });\r\n  return (\r\n    <div className=\"todoList\">\r\n    <h1>Manage Your Day<span>Todo App</span></h1>\r\n    <ul>\r\n    <TransitionGroup className=\"todo-list\">{todosList}</TransitionGroup>\r\n  </ul>\r\n      <NewTodo createTodo={Create} />\r\n  \r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ToDoList;\r\n","import React from 'react';\nimport './App.css';\nimport ToDoList from './ToDoList/ToDoList';\n\nfunction App() {\n  return (\n    <div >\n    <ToDoList/>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n\n"],"sourceRoot":""}